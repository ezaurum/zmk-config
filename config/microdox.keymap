// microdox
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NAV 1
#define HOMEROW 2
#define FUNC 3
#define SYM 4

#define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
  combo_##NAME { \
    timeout-ms = <90>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

  &lt {
                        tapping-term-ms = <250>;
                        quick-tap-ms = <220>;
                        global-quick-tap;
  };

/ {

        behaviors {
                hm: homerow_mods {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <150>;
                        global-quick-tap;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&kp>;
                };
        };

        combos {
                compatible = "zmk,combos";

                 COMBO(esckey, &kp ESC, 11 12)
                 COMBO(tabkey, &kp TAB, 12 13)
                 COMBO(tabkey, &kp LSHFT, 11 13)

                 COMBO(tabkey, &kp RSHFT, 16 18)
                 COMBO(tabkey, &kp BSPC, 16 17)
                 COMBO(tabkey, &kp SQT, 16 19)
                 COMBO(tabkey, &kp SEMI, 17 19)

                COMBO(one, &kp N1, 0 10)
                COMBO(two, &kp N2, 1 11)
                COMBO(three, &kp N3, 2 12)
                COMBO(four, &kp N4, 3 13)
                COMBO(five, &kp N5, 4 14)
                COMBO(six, &kp N6, 5 15)
                COMBO(seven, &kp N7, 6 16)
                COMBO(eight, &kp N8, 7 17)
                COMBO(nine, &kp N9, 8 18)
                COMBO(zero, &kp N0, 9 19)
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//             |  -  | BSP | DEL |   | ENT | SPC  | ALT |
                        bindings = <
   &kp Q          &kp W       &kp E        &kp R        &kp T       /**/    &kp Y   &kp U       &kp I       &kp O        &kp P
   &kp A      &kp S  &kp D  &kp F  &kp G       /**/    &kp H   &kp J &kp  K &kp  L   &kp SEMI
   &kp Z          &kp X       &kp C        &kp V        &kp B       /**/    &kp N   &kp M       &kp COMMA   &kp DOT      &kp SLASH
                        &lt HOMEROW LGUI   &lt NAV BSPC &lt HOMEROW DEL   /**/  &lt HOMEROW ENTER  &lt HOMEROW SPACE  &lt SYM SQT
                        >;
                };


                nav_layer {
/*
*/
                        bindings = <
   &kp ESC    &kp LA(W) &none  &none       &none    /**/   &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp INS
   &kp LGUI   &kp LALT   &kp LSHFT   &kp LCTRL   &none    /**/   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp SQT
   &none      &none      &none       &kp BSPC    &none    /**/   &kp LS(INS)  &kp LC(INS)    &kp LC(C)  &kp LC(V)  &none
                         &kp LSHFT   &none       &kp DEL    /**/   &kp ENTER  &kp SPACE  &kp RSHFT
                        >;
                };
                homerow_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//             |  -  | BSP | DEL |   | ENT | SPC  | ALT |
                        bindings = <
   &kp Q          &kp W       &kp E        &kp R        &kp T       /**/    &kp Y   &kp U       &kp I       &kp O        &kp P
   &hm LGUI A      &hm RALT S  &hm LSHFT D  &hm LCTRL F  &kp G       /**/    &kp H   &hm RCTRL J &hm RSHFT K &hm LALT L   &hm RGUI SEMI
   &kp Z          &kp X       &kp C        &kp V        &kp B       /**/    &kp N   &kp M       &kp COMMA   &kp DOT      &kp SLASH
                        &lt WIN LGUI   &lt FUNC BSPC &none   /**/  &none  &lt FUNC SPACE  &hm RSHFT SQT
                        >;
                };

                sym_layer {
/*
        |  `  |  $  |  !  |  {  |  }  |        |     |     |     |     |     |
        |  \  |  #  |  &  |  (  |  )  |        |     |     |     |     |     |
        |  -  |  _  |  |  |  [  |  ]  |        |     | CUT | CPY | PST |     |
                    |     |     |     |        |     |     |     |
*/
                        bindings = <
   &kp GRAVE  &kp DLLR  &kp EXCL   &kp LBRC   &kp RBRC   /**/   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_CLR
   &kp BSLH   &kp HASH  &kp AMPS   &kp LPAR   &kp RPAR   /**/   &none         &none         &none          &none         &none
   &kp MINUS  &kp UNDER &kp PIPE   &kp LBKT   &kp RBKT   /**/   &none         &kp LC(Z)     &kp LC(C)      &kp LC(V)     &none
                        &none      &none      &none      /**/   &none         &none         &none
                        >;
                };


                func_layer {
/*
        | F12 |  F7 |  F8 |  F9 |     |        |     |     |     |     |     |
        | F11 |  F4 |  F5 |  F6 |     |        |     | WIN | ALT | SFT | CTL |
        | F10 |  F1 |  F2 |  F3 |     |        |     |     |     |     |     |
                    |     |     |     |        |     |     |     |
*/
                        bindings = <
   &kp F1    &kp F2    &kp F3     &kp F4     &kp F5  /**/   &kp F6      &kp F7      &kp F8      &kp F9      &kp F10
   &kp LGUI  &kp LALT  &kp RSHIFT   &kp LCTRL  &none  /**/   &none     &kp RCTRL  &kp RSHFT  &kp RALT   &kp RGUI
   &kp F1    &kp F2    &kp F3     &kp F4     &kp F5 /**/   &kp F6      &kp F7      &kp F8      &kp F9      &kp F10
                        &none      &none      &none  /**/   &none      &none      &none
                        >;
                };


        };
};
